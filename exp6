//a. Sorting Employee objects using lambda expressions

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Employee {
    String name;
    int age;
    double salary;

    Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "Employee{name='" + name + "', age=" + age + ", salary=" + salary + "}";
    }
}

public class EmployeeSorter {
    public static void main(String[] args) {
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("Alice", 30, 50000));
        employees.add(new Employee("Bob", 25, 45000));
        employees.add(new Employee("Charlie", 35, 55000));

        // Sort by name
        Collections.sort(employees, (e1, e2) -> e1.name.compareTo(e2.name));
        System.out.println("Sorted by name: " + employees);

        // Sort by age
        Collections.sort(employees, (e1, e2) -> Integer.compare(e1.age, e2.age));
        System.out.println("Sorted by age: " + employees);

        // Sort by salary
        Collections.sort(employees, (e1, e2) -> Double.compare(e1.salary, e2.salary));
        System.out.println("Sorted by salary: " + employees);
    }
}

//b. Filtering and sorting students using lambda expressions and streams


import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

class Student {
    String name;
    double marks;

    Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }
}

public class StudentFilter {
    public static void main(String[] args) {
        List<Student> students = Arrays.asList(
            new Student("Alice", 80),
            new Student("Bob", 70),
            new Student("Charlie", 85),
            new Student("David", 90)
        );

        List<String> highScoringStudents = students.stream()
            .filter(s -> s.marks > 75)
            .sorted((s1, s2) -> Double.compare(s2.marks, s1.marks))
            .map(s -> s.name)
            .collect(Collectors.toList());

        System.out.println("High scoring students (sorted by marks): " + highScoringStudents);
    }
}

//c. Processing a large dataset of products using streams

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

class Product {
    String name;
    String category;
    double price;

    Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }
}

public class ProductProcessor {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 1000),
            new Product("Smartphone", "Electronics", 500),
            new Product("Shirt", "Clothing", 30),
            new Product("Jeans", "Clothing", 50),
            new Product("Book", "Books", 15),
            new Product("Tablet", "Electronics", 300)
        );

        // Group products by category
        Map<String, List<Product>> groupedProducts = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));
        System.out.println("Grouped products: " + groupedProducts);

        // Find most expensive product in each category
        Map<String, Product> mostExpensiveByCategory = products.stream()
            .collect(Collectors.groupingBy(
                p -> p.category,
                Collectors.collectingAndThen(
                    Collectors.maxBy((p1, p2) -> Double.compare(p1.price, p2.price)),
                    optional -> optional.orElse(null)
                )
            ));
        System.out.println("Most expensive by category: " + mostExpensiveByCategory);

        // Calculate average price of all products
        double averagePrice = products.stream()
            .mapToDouble(p -> p.price)
            .average()
            .orElse(0.0);
        System.out.println("Average price: " + averagePrice);
    }
}

